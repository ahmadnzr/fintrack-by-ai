openapi: 3.0.3
info:
  title: Fintrack API
  description: API for Fintrack Personal Finance Management Application
  version: 1.0.0
  
servers:
  - url: /api
    description: Default API server

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
      required:
        - id
        - email
    
    TransactionType:
      type: string
      enum: [income, expense]
    
    CategoryType:
      type: string
      enum: [income, expense, general]
    
    Transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        date:
          type: string
          format: date-time
          description: ISO string for date
        description:
          type: string
        amount:
          type: number
          format: float
          minimum: 0
        category:
          type: string
          description: Category ID or name
        type:
          $ref: '#/components/schemas/TransactionType'
        attachmentUrl:
          type: string
          format: uri
          nullable: true
        tags:
          type: array
          items:
            type: string
          nullable: true
      required:
        - id
        - date
        - description
        - amount
        - category
        - type
    
    TransactionInput:
      type: object
      properties:
        date:
          type: string
          format: date-time
        description:
          type: string
          minLength: 1
        amount:
          type: number
          format: float
          minimum: 0.01
        category:
          type: string
          minLength: 1
        type:
          $ref: '#/components/schemas/TransactionType'
        attachmentUrl:
          type: string
          format: uri
          nullable: true
        tags:
          type: array
          items:
            type: string
          nullable: true
      required:
        - date
        - description
        - amount
        - category
        - type
    
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        type:
          $ref: '#/components/schemas/CategoryType'
        isCustom:
          type: boolean
        icon:
          type: string
          nullable: true
      required:
        - id
        - name
        - type
        - isCustom
    
    CategoryInput:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
        type:
          $ref: '#/components/schemas/CategoryType'
      required:
        - name
        - type
    
    FinancialInsightParams:
      type: object
      properties:
        income:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date-time
              description:
                type: string
              amount:
                type: number
                format: float
              category:
                type: string
            required:
              - date
              - description
              - amount
              - category
        expenses:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date-time
              description:
                type: string
              amount:
                type: number
                format: float
              category:
                type: string
            required:
              - date
              - description
              - amount
              - category
      required:
        - income
        - expenses
    
    FinancialInsightResponse:
      type: object
      properties:
        insights:
          type: string
          description: AI-generated insights on spending habits
        error:
          type: string
          nullable: true
    
    UserSettings:
      type: object
      properties:
        theme:
          type: string
          enum: [light, dark]
          default: light
        language:
          type: string
          enum: [en, id, es]
          default: en
    
    RoomStatus:
      type: string
      enum: [available, booked, maintenance]
    
    BookingStatus:
      type: string
      enum: [pending, confirmed, cancelled, completed]
    
    Room:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        capacity:
          type: integer
          minimum: 1
        status:
          $ref: '#/components/schemas/RoomStatus'
        location:
          type: string
          nullable: true
        facilities:
          type: array
          items:
            $ref: '#/components/schemas/Facility'
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - capacity
        - status
    
    RoomInput:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
          nullable: true
        capacity:
          type: integer
          minimum: 1
          maximum: 100
        location:
          type: string
          maxLength: 200
          nullable: true
        facilityIds:
          type: array
          items:
            type: string
            format: uuid
          nullable: true
      required:
        - name
        - capacity
    
    Facility:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        icon:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - name
    
    FacilityInput:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
        description:
          type: string
          maxLength: 200
          nullable: true
        icon:
          type: string
          maxLength: 50
          nullable: true
      required:
        - name
    
    Booking:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        roomId:
          type: string
          format: uuid
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        purpose:
          type: string
        status:
          $ref: '#/components/schemas/BookingStatus'
        room:
          $ref: '#/components/schemas/Room'
          nullable: true
        user:
          $ref: '#/components/schemas/User'
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - roomId
        - startTime
        - endTime
        - purpose
        - status
    
    BookingInput:
      type: object
      properties:
        roomId:
          type: string
          format: uuid
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        purpose:
          type: string
          minLength: 1
          maxLength: 200
      required:
        - roomId
        - startTime
        - endTime
        - purpose
    
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            _form:
              type: array
              items:
                type: string
              nullable: true
            message:
              type: string
              nullable: true
    
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          enum: [true]
        data:
          type: object
          nullable: true

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /transactions:
    get:
      summary: Get all transactions
      description: Retrieves all transactions for the authenticated user
      security:
        - BearerAuth: []
      parameters:
        - name: type
          in: query
          description: Filter by transaction type
          schema:
            $ref: '#/components/schemas/TransactionType'
        - name: category
          in: query
          description: Filter by category
          schema:
            type: string
        - name: search
          in: query
          description: Search term for description, category, or tags
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: A list of transactions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      pages:
                        type: integer
                      currentPage:
                        type: integer
                      limit:
                        type: integer
        '401':
          description: Unauthorized

  /rooms:
    get:
      summary: Get all rooms
      description: Retrieves all rooms with optional filtering
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter by room status
          schema:
            $ref: '#/components/schemas/RoomStatus'
        - name: capacity
          in: query
          description: Minimum capacity required
          schema:
            type: integer
            minimum: 1
        - name: facilityIds
          in: query
          description: Filter by facility IDs (comma-separated)
          schema:
            type: string
        - name: search
          in: query
          description: Search term for room name or location
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: A list of rooms
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Room'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      pages:
                        type: integer
                      currentPage:
                        type: integer
                      limit:
                        type: integer
        '401':
          description: Unauthorized
    post:
      summary: Create a new room
      description: Creates a new room (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomInput'
      responses:
        '201':
          description: Room created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Room'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required

  /rooms/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get a room by ID
      description: Retrieves a specific room with its facilities
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Room details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Room'
        '404':
          description: Room not found
        '401':
          description: Unauthorized
    put:
      summary: Update a room
      description: Updates an existing room (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomInput'
      responses:
        '200':
          description: Room updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Room'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Room not found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
    delete:
      summary: Delete a room
      description: Deletes an existing room (admin only)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Room deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Room not found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required

  /facilities:
    get:
      summary: Get all facilities
      description: Retrieves all available facilities
      security:
        - BearerAuth: []
      parameters:
        - name: search
          in: query
          description: Search term for facility name
          schema:
            type: string
      responses:
        '200':
          description: A list of facilities
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Facility'
        '401':
          description: Unauthorized
    post:
      summary: Create a new facility
      description: Creates a new facility (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacilityInput'
      responses:
        '201':
          description: Facility created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Facility'
        '400':
          description: Invalid input or facility already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required

  /facilities/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get a facility by ID
      description: Retrieves a specific facility by its ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Facility details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Facility'
        '404':
          description: Facility not found
        '401':
          description: Unauthorized
    put:
      summary: Update a facility
      description: Updates an existing facility (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacilityInput'
      responses:
        '200':
          description: Facility updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Facility'
        '400':
          description: Invalid input or facility already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Facility not found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required
    delete:
      summary: Delete a facility
      description: Deletes an existing facility (admin only)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Facility deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Facility not found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Admin access required

  /bookings:
    get:
      summary: Get bookings
      description: Retrieves bookings for the authenticated user or all bookings (admin)
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter by booking status
          schema:
            $ref: '#/components/schemas/BookingStatus'
        - name: roomId
          in: query
          description: Filter by room ID
          schema:
            type: string
            format: uuid
        - name: userId
          in: query
          description: Filter by user ID (admin only)
          schema:
            type: string
            format: uuid
        - name: startDate
          in: query
          description: Filter bookings starting from this date
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: Filter bookings ending before this date
          schema:
            type: string
            format: date-time
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: A list of bookings
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Booking'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      pages:
                        type: integer
                      currentPage:
                        type: integer
                      limit:
                        type: integer
        '401':
          description: Unauthorized
    post:
      summary: Create a new booking
      description: Creates a new room booking
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingInput'
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Booking'
        '400':
          description: Invalid input, time conflict, or user already has active booking
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized

  /bookings/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get a booking by ID
      description: Retrieves a specific booking by its ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Booking details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Booking'
        '404':
          description: Booking not found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Can only access own bookings
    put:
      summary: Update a booking
      description: Updates an existing booking (cancel, confirm, or modify)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/BookingStatus'
                startTime:
                  type: string
                  format: date-time
                endTime:
                  type: string
                  format: date-time
                purpose:
                  type: string
                  minLength: 1
                  maxLength: 200
      responses:
        '200':
          description: Booking updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Booking'
        '400':
          description: Invalid input or time conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Booking not found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Can only modify own bookings
    delete:
      summary: Delete a booking
      description: Deletes an existing booking
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Booking deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Booking not found
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Can only delete own bookings

  /transactions:
    post:
      summary: Create a new transaction
      description: Creates a new transaction for the authenticated user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionInput'
      responses:
        '201':
          description: Transaction created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized

  /transactions/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get a transaction by ID
      description: Retrieves a specific transaction by its ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Transaction details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Transaction'
        '404':
          description: Transaction not found
        '401':
          description: Unauthorized
    put:
      summary: Update a transaction
      description: Updates an existing transaction
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionInput'
      responses:
        '200':
          description: Transaction updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Transaction not found
        '401':
          description: Unauthorized
    delete:
      summary: Delete a transaction
      description: Deletes an existing transaction
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Transaction deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Transaction not found
        '401':
          description: Unauthorized

  /categories:
    get:
      summary: Get all categories
      description: Retrieves all categories for the authenticated user
      security:
        - BearerAuth: []
      parameters:
        - name: type
          in: query
          description: Filter by category type
          schema:
            $ref: '#/components/schemas/CategoryType'
        - name: isCustom
          in: query
          description: Filter by custom status
          schema:
            type: boolean
        - name: search
          in: query
          description: Search term for category name
          schema:
            type: string
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized
    post:
      summary: Create a new category
      description: Creates a new custom category for the authenticated user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Category'
        '400':
          description: Invalid input or category already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized

  /categories/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get a category by ID
      description: Retrieves a specific category by its ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
        '401':
          description: Unauthorized
    put:
      summary: Update a category
      description: Updates an existing custom category
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Category'
        '400':
          description: Invalid input or category already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Category not found or not a custom category
        '401':
          description: Unauthorized
    delete:
      summary: Delete a category
      description: Deletes an existing custom category
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Category deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Category not found or not a custom category
        '401':
          description: Unauthorized

  /insights/financial:
    post:
      summary: Generate financial insights
      description: Generates AI-powered financial insights based on transaction data
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Financial insights generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialInsightResponse'
        '400':
          description: Not enough transaction data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized

  /user/settings:
    get:
      summary: Get user settings
      description: Retrieves the settings for the authenticated user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User settings
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserSettings'
        '401':
          description: Unauthorized
    put:
      summary: Update user settings
      description: Updates the settings for the authenticated user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettings'
      responses:
        '200':
          description: Settings updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserSettings'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized

  /export/transactions:
    get:
      summary: Export transactions
      description: Exports transactions in the specified format
      security:
        - BearerAuth: []
      parameters:
        - name: format
          in: query
          required: true
          description: Export format
          schema:
            type: string
            enum: [pdf, excel]
        - name: startDate
          in: query
          description: Start date for filtering transactions (ISO format)
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          description: End date for filtering transactions (ISO format)
          schema:
            type: string
            format: date-time
        - name: type
          in: query
          description: Filter by transaction type
          schema:
            $ref: '#/components/schemas/TransactionType'
      responses:
        '200':
          description: File download
          content:
            application/pdf:
              schema:
                type: string
                format: binary
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
